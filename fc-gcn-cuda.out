/home/tpelletreaudur/.local/lib/python3.10/site-packages/torch_geometric/deprecation.py:26: UserWarning: 'data.DataLoader' is deprecated, use 'loader.DataLoader' instead
  warnings.warn(out)
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:250: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  train_x = np.array([feat[0] for feat in train_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:250: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  train_x = np.array([feat[0] for feat in train_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:251: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  test_x = np.array([feat[0] for feat in test_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:251: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  test_x = np.array([feat[0] for feat in test_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:254: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  train_x2 = np.array([feat[1] for feat in train_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:254: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  train_x2 = np.array([feat[1] for feat in train_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:255: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  test_x2 = np.array([feat[1] for feat in test_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:255: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  test_x2 = np.array([feat[1] for feat in test_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:257: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  train_x3 = np.array([feat[2] for feat in train_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:257: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  train_x3 = np.array([feat[2] for feat in train_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:258: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  test_x3 = np.array([feat[2] for feat in test_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:258: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  test_x3 = np.array([feat[2] for feat in test_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:260: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  train_x4 = np.array([feat[3] for feat in train_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:260: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  train_x4 = np.array([feat[3] for feat in train_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:261: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  test_x4 = np.array([feat[3] for feat in test_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:261: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  test_x4 = np.array([feat[3] for feat in test_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:263: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  train_x5 = np.array([feat[4] for feat in train_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:263: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  train_x5 = np.array([feat[4] for feat in train_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:264: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  test_x5 = np.array([feat[4] for feat in test_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:264: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  test_x5 = np.array([feat[4] for feat in test_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:266: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  train_x_global = np.array([feat[5] for feat in train_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:266: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  train_x_global = np.array([feat[5] for feat in train_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:267: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  test_x_global = np.array([feat[5] for feat in test_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:267: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  test_x_global = np.array([feat[5] for feat in test_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:269: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  train_x6 = np.array([feat[6] for feat in train_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:269: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  train_x6 = np.array([feat[6] for feat in train_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:270: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  test_x6 = np.array([feat[6] for feat in test_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:270: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  test_x6 = np.array([feat[6] for feat in test_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:272: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  train_x7 = np.array([feat[7] for feat in train_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:272: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  train_x7 = np.array([feat[7] for feat in train_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:273: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  test_x7 = np.array([feat[7] for feat in test_features])
/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py:273: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  test_x7 = np.array([feat[7] for feat in test_features])
GPU available? False
Data(x=[116, 116], edge_index=[2, 1016], edge_attr=[1016, 1], y=[1])
['y', 'edge_index', 'edge_attr', 'x']
ValuesView({'x': tensor([[ 0.0000,  0.4543,  0.2477,  ...,  0.1753,  0.2247, -0.1751],
        [ 0.4543,  0.0000, -0.2204,  ..., -0.1947, -0.2258, -0.1434],
        [ 0.2477, -0.2204,  0.0000,  ..., -0.0521, -0.0804, -0.2025],
        ...,
        [ 0.1753, -0.1947, -0.0521,  ...,  0.0000,  0.6875, -0.1364],
        [ 0.2247, -0.2258, -0.0804,  ...,  0.6875,  0.0000,  0.0929],
        [-0.1751, -0.1434, -0.2025,  ..., -0.1364,  0.0929,  0.0000]]), 'edge_index': tensor([[  0,   0,   0,  ..., 114, 115, 115],
        [  1,  10,  12,  ..., 113,  94, 109]]), 'edge_attr': tensor([[0.4543],
        [0.5913],
        [0.4224],
        ...,
        [0.6875],
        [0.4846],
        [0.5437]]), 'y': tensor([0])})
Net(
  (conv_layers): ModuleList(
    (0): GCNConv(116, 128)
    (1): GCNConv(128, 128)
    (2): GCNConv(128, 128)
    (3): GCNConv(128, 128)
    (4): GCNConv(128, 128)
  )
  (batch_norms): ModuleList(
    (0): BatchNorm(128)
    (1): BatchNorm(128)
    (2): BatchNorm(128)
    (3): BatchNorm(128)
    (4): BatchNorm(128)
  )
  (lin1): Linear(128, 128, bias=True)
  (lin2): Linear(128, 2, bias=True)
  (bn1): BatchNorm(128)
  (bn2): BatchNorm(2)
)
tensor([217, 137, 426,  ..., 643, 205, 434])
Test Loss: 0.728, Train Acc: 1.000 Test Acc: 0.564
[tensor([[-0.1807,  0.3679,  0.6447,  ..., -0.6176, -0.6034, -0.3380],
        [-0.6575,  0.2154,  0.2405,  ..., -0.6176, -0.6034,  0.0709],
        [-0.6575,  0.3261,  0.6596,  ..., -0.6176, -0.6034, -0.3490],
        ...,
        [-0.6575, -0.6293, -0.7835,  ..., -0.6176, -0.6034, -0.6572],
        [-0.6575, -0.6293, -0.7835,  ..., -0.6176, -0.6034, -0.6572],
        [-0.6575, -0.6293, -0.7835,  ..., -0.6176, -0.6034, -0.6572]]), tensor([[ 1.9843,  4.1499, -0.5808,  ..., -0.6206, -0.6663, -0.7038],
        [ 1.7514,  4.2385, -0.5808,  ..., -0.6206, -0.6663, -0.7038],
        [ 2.0884,  4.1718, -0.5808,  ..., -0.6206, -0.6663, -0.7038],
        ...,
        [-0.5995,  0.7011,  0.3448,  ...,  0.1804,  1.7173, -0.5173],
        [ 0.0061, -0.6958, -0.5808,  ..., -0.6206, -0.6663, -0.7038],
        [-0.3976,  0.6808, -0.5808,  ..., -0.2685,  0.4362,  0.0840]]), tensor([[ 3.6557, -0.6649, -0.6987,  ...,  2.4417, -0.6806,  0.7779],
        [ 3.5007, -0.6649, -0.6987,  ...,  2.6376, -0.6806,  1.3495],
        [ 3.4609, -0.6649, -0.6987,  ...,  2.6043, -0.6806,  1.3946],
        ...,
        [-0.6528, -0.6649, -0.1853,  ..., -0.0542, -0.6806, -0.6683],
        [ 0.4331, -0.6649, -0.6987,  ..., -0.2799, -0.6806,  0.7140],
        [-0.1805, -0.6649, -0.6987,  ..., -0.7290,  0.0839, -0.1916]]), tensor([[ 3.5254,  3.2327, -0.6490,  ..., -0.4326,  0.8694, -0.6159],
        [ 3.6634,  2.9451, -0.6490,  ..., -0.5337,  0.2766, -0.6159],
        [ 3.5590,  2.8893, -0.6490,  ..., -0.4246,  0.4688, -0.6159],
        ...,
        [-0.5984, -0.0082, -0.6490,  ..., -0.1855,  0.6156,  0.0350],
        [-0.5984, -0.6883, -0.6490,  ..., -0.3682, -0.0378, -0.2870],
        [-0.5984, -0.5063, -0.1237,  ..., -0.6444, -0.1067,  0.5633]]), tensor([[-0.5826, -0.6974, -0.6164,  ..., -0.6190, -0.5575,  0.1113],
        [-0.6336, -0.6974, -0.6164,  ..., -0.6190, -0.6234,  0.2785],
        [-0.5725, -0.6974, -0.6164,  ..., -0.6190, -0.6234,  0.2422],
        ...,
        [ 0.2110, -0.1096, -0.6164,  ..., -0.2391, -0.6234, -0.3992],
        [ 0.1970, -0.6974, -0.6164,  ..., -0.0854, -0.6234, -0.4117],
        [ 0.2266, -0.2347, -0.6164,  ...,  0.1192, -0.6234,  0.2422]]), tensor([[ 1.7598,  0.3598, -0.4109, -0.2686,  2.7513,  5.0851,  5.8698,  0.6709,
          2.8498,  1.6552,  3.3181,  2.0627,  1.1337,  1.3173,  3.2545,  5.4298,
          3.5204,  3.5634,  2.8476,  6.0792,  0.8208,  0.5529,  0.5992,  1.6562,
          2.8730,  5.2336,  3.0085,  2.0274,  1.5359,  1.7882,  2.0349,  2.3044,
          0.1380,  2.0252,  7.9703,  5.3423, -0.5645,  1.1732,  1.8209, -0.3090,
          1.2601, -0.1486,  1.5950,  2.5722,  1.7554,  0.6477,  0.2683,  0.3953,
          1.4164,  1.3331,  4.6458,  1.4622,  1.2025,  1.5091, -0.5514,  1.6798,
          1.3257,  0.6266,  0.2652,  3.2699,  2.7799,  1.0118,  1.8213,  1.1088,
          0.5703,  0.2208,  1.7767, -0.5316,  0.1659,  0.8127,  2.2174,  6.5157,
          1.4985,  0.9439,  3.1406, -0.1925,  4.4101,  1.3683, -0.4250,  0.9202,
          4.0434,  0.2718, -0.6108,  0.6223,  2.7921,  1.8377,  0.9064, -0.5768,
          3.0885,  1.8909,  2.2557,  3.0307,  4.6860,  0.3173,  1.2635,  0.7459,
          0.9233,  3.1416,  1.1200,  2.7610,  3.7502,  0.4435,  5.1102,  4.6052,
         -0.3747,  2.0555, -0.6719,  2.9694,  0.9530,  0.3496, -0.5905,  0.5371,
          0.4471,  2.3053,  3.6371, -0.1490,  0.3586,  3.0938,  4.4187,  1.3893,
          1.9110,  1.4228,  0.9548,  0.9183,  1.4278,  4.6106,  1.0969,  1.1386]]), tensor([[1.2165, 0.0000, 0.0000, 0.0000, 0.0000, 1.9702, 0.0000, 1.3711, 0.6471,
         0.1293, 0.0000, 0.9002, 0.1331, 1.5448, 2.3263, 0.5987, 0.1555, 1.2301,
         0.0986, 0.0000, 0.1532, 0.3730, 0.0000, 0.0000, 1.1625, 0.0000, 0.0000,
         0.0000, 0.0477, 0.0000, 0.9257, 3.0588, 0.0000, 0.3410, 1.3786, 0.0000,
         0.0000, 0.0000, 0.0000, 1.5633, 1.5378, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0248, 0.0000, 2.1172, 0.8081, 0.0000, 0.1094, 0.7669, 0.0000, 0.0000,
         1.2252, 0.0000, 0.0000, 0.0310, 1.3463, 1.2650, 0.0000, 0.0000, 0.2763,
         0.2923, 0.0000, 2.2450, 0.6581, 0.0000, 0.9133, 0.0414, 0.0000, 0.6391,
         0.1701, 0.0000, 0.0000, 1.1249, 0.0000, 0.9291, 0.0000, 1.8566, 1.3126,
         0.0269, 0.0000, 0.0000, 0.0000, 1.1955, 0.0000, 0.0000, 0.0000, 0.3822,
         1.4529, 0.0000, 2.5749, 0.1834, 1.1013, 0.0000, 0.6639, 0.0000, 0.0000,
         0.0000, 1.2491, 0.0000, 0.9806, 1.9988, 0.0000, 0.6400, 0.0000, 0.8475,
         0.0000, 0.1673, 0.5783, 0.1250, 0.7647, 0.8413, 0.0000, 0.0000, 0.0000,
         1.4384, 0.0000, 0.0000, 0.0000, 0.0000, 2.6141, 0.3366, 0.0000, 0.2520,
         0.0000, 0.0000]]), tensor([[-1.3089,  1.2146]])]
8
Traceback (most recent call last):
  File "/gpfs/home3/tpelletreaudur/Probing-GNN-representations/FC_probing_GCN.py", line 280, in <module>
    train_x = torch.tensor(train_x, dtype=torch.float32)
TypeError: can't convert np.ndarray of type numpy.object_. The only supported types are: float64, float32, float16, complex64, complex128, int64, int32, int16, int8, uint8, and bool.

JOB STATISTICS
==============
Job ID: 8012973
Cluster: snellius
User/Group: tpelletreaudur/tpelletreaudur
State: FAILED (exit code 1)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:12:32
CPU Efficiency: 36.72% of 00:34:08 core-walltime
Job Wall-clock time: 00:02:08
Memory Utilized: 685.70 MB
Memory Efficiency: 2.39% of 28.00 GB
